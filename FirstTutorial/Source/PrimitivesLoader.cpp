#include "Headers/PrimitivesLoader.h"

#include <vector>

#include <boost/algorithm/string.hpp>

#include "Headers/ModelTexture.h"
#include "Headers/Mesh.h"
#include "Headers/Model.h"
#include "Headers/Structs.h"

const std::unordered_map<std::string, PrimitivesLoader::PrimitivesNames> PrimitivesLoader::modelNameMap_ = {
    {"plane", Plane}, {"box", Box}, {"quad", Quad}, {"brickwall", BrickWall}, {"sphere", Sphere}
};

Model PrimitivesLoader::LoadPrimitive(std::string primitiveFile)
{
    std::string primitiveName = boost::algorithm::to_lower_copy(primitiveFile);
    PrimitivesNames primitiveValue = modelNameMap_.at(primitiveName);
    switch (primitiveValue) {
        case Plane:
            return create_plane();
            break;
        case Quad:
            return create_quad();
            break;
        case BrickWall:
            return create_brick_wall();
            break;
        case Sphere:
            return create_sphere();
            break;
        default:
        case Box:
            return create_box();
        break;
    }
}

Model PrimitivesLoader::create_plane()
{
	std::vector<Mesh> meshes = std::vector<Mesh>();
	meshes.push_back(create_plane_mesh());

	std::vector<std::vector<ModelTexture>> mesh_textures = std::vector<std::vector<ModelTexture>>();
	std::vector<ModelTexture> textures = std::vector<ModelTexture>();
	textures.push_back(load_texture("Resources", "awesomeface.png", ModelTextureType::DiffuseMap));
	mesh_textures.push_back(textures);

	return Model(meshes, mesh_textures);
}

Model PrimitivesLoader::create_brick_wall()
{
    std::vector<Mesh> meshes = std::vector<Mesh>();
    meshes.push_back(create_plane_mesh());
    
    std::vector<std::vector<ModelTexture>> mesh_textures = std::vector<std::vector<ModelTexture>>();
    std::vector<ModelTexture> textures = std::vector<ModelTexture>();
    textures.push_back(load_texture("Resources", "brickwall.jpg", ModelTextureType::DiffuseMap));
    textures.push_back(load_texture("Resources", "brickwall_normal.jpg", ModelTextureType::NormalMap));
    mesh_textures.push_back(textures);
    
    return Model(meshes, mesh_textures);
}

Model PrimitivesLoader::create_box()
{
	std::vector<Mesh> meshes = std::vector<Mesh>();
	meshes.push_back(create_box_mesh());

	std::vector<std::vector<ModelTexture>> mesh_textures = std::vector<std::vector<ModelTexture>>();
	std::vector<ModelTexture> textures = std::vector<ModelTexture>();
	textures.push_back(load_texture("Resources", "container2_diffuse.png", ModelTextureType::DiffuseMap));
	textures.push_back(load_texture("Resources", "container2_specular.png", ModelTextureType::SpecularMap));
	mesh_textures.push_back(textures);

	return Model(meshes, mesh_textures);
}

Model PrimitivesLoader::create_quad()
{
	std::vector<Mesh> meshes = std::vector<Mesh>();
	meshes.push_back(create_quad_mesh());

	std::vector<std::vector<ModelTexture>> mesh_textures = std::vector<std::vector<ModelTexture>>();
	std::vector<ModelTexture> textures = std::vector<ModelTexture>();
	textures.push_back(load_texture("Resources", "blending_transparent_window.png", ModelTextureType::DiffuseMap));
	mesh_textures.push_back(textures);

	return Model(meshes, mesh_textures);
}

Model PrimitivesLoader::create_sphere()
{
    std::vector<Mesh> meshes = std::vector<Mesh>();
    meshes.push_back(create_sphere_mesh());
    
    std::vector<std::vector<ModelTexture>> mesh_textures = std::vector<std::vector<ModelTexture>>();
    std::vector<ModelTexture> textures = std::vector<ModelTexture>();
    textures.push_back(load_texture("Resources", "awesomeface.png", ModelTextureType::DiffuseMap));
    mesh_textures.push_back(textures);
    
    return Model(meshes, mesh_textures);
}

Mesh PrimitivesLoader::create_plane_mesh()
{
	float vertices[] = {
		// positions          // texture Coords (note we set these higher than 1 (together with GL_REPEAT as texture wrapping mode). this will cause the floor texture to repeat)
		-5.0f, 0.0f, -5.0f, 0.0f, 1.0f, 0.0f, 0.0f, 2.0f,
		-5.0f, 0.0f,  5.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f,
		5.0f, 0.0f,  5.0f, 0.0f, 1.0f, 0.0f, 2.0f, 0.0f,

		5.0f, 0.0f,  5.0f, 0.0f, 1.0f, 0.0f, 2.0f, 0.0f,
		5.0f, 0.0f, -5.0f, 0.0f, 1.0f, 0.0f, 2.0f, 2.0f,
		-5.0f, 0.0f, -5.0f, 0.0f, 1.0f, 0.0f, 0.0f, 2.0f
	};

	int length = sizeof(vertices) / sizeof(vertices[0]);

	std::vector<Vertex> vertexes;

	for (int i = 0; i < length; i += 8)
	{
		glm::vec3 pos = glm::vec3(vertices[i], vertices[i + 1], vertices[i + 2]);
		glm::vec3 norm = glm::vec3(vertices[i + 3], vertices[i + 4], vertices[i + 5]);
		glm::vec2 coords = glm::vec2(vertices[i + 6], vertices[i + 7]);

		vertexes.push_back(create_vertex(pos, norm, coords));
	}

	std::vector<unsigned int> indices = {
		0, 1, 2,
		3, 4, 5
	};

	return Mesh(vertexes, indices);
}

Mesh PrimitivesLoader::create_sphere_mesh()
{
    float vertices[] = {
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.00000f, 0.00000f,
        -0.25882f, -0.96593f, 0.00000f, -0.25882f, -0.96593f, 0.00000f, 0.00000f, -0.08333f,
        -0.50000f, -0.86603f, 0.00000f, -0.50000f, -0.86603f, 0.00000f, 0.00000f, -0.16667f,
        -0.70711f, -0.70711f, 0.00000f, -0.70711f, -0.70711f, 0.00000f, 0.00000f, -0.25000f,
        -0.86603f, -0.50000f, 0.00000f, -0.86603f, -0.50000f, 0.00000f, 0.00000f, -0.33333f,
        -0.96593f, -0.25882f, 0.00000f, -0.96593f, -0.25882f, 0.00000f, 0.00000f, -0.41667f,
        -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.00000f, 0.00000f, -0.50000f,
        -0.96593f, 0.25882f, 0.00000f, -0.96593f, 0.25882f, 0.00000f, 0.00000f, -0.58333f,
        -0.86603f, 0.50000f, 0.00000f, -0.86603f, 0.50000f, 0.00000f, 0.00000f, -0.66667f,
        -0.70711f, 0.70711f, 0.00000f, -0.70711f, 0.70711f, 0.00000f, 0.00000f, -0.75000f,
        -0.50000f, 0.86603f, 0.00000f, -0.50000f, 0.86603f, 0.00000f, 0.00000f, -0.83333f,
        -0.25882f, 0.96593f, 0.00000f, -0.25882f, 0.96593f, 0.00000f, 0.00000f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.00000f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.04167f, 0.00000f,
        -0.25000f, -0.96593f, -0.06699f, -0.25000f, -0.96593f, -0.06699f, 0.04167f, -0.08333f,
        -0.48296f, -0.86603f, -0.12941f, -0.48296f, -0.86603f, -0.12941f, 0.04167f, -0.16667f,
        -0.68301f, -0.70711f, -0.18301f, -0.68301f, -0.70711f, -0.18301f, 0.04167f, -0.25000f,
        -0.83652f, -0.50000f, -0.22414f, -0.83652f, -0.50000f, -0.22414f, 0.04167f, -0.33333f,
        -0.93301f, -0.25882f, -0.25000f, -0.93301f, -0.25882f, -0.25000f, 0.04167f, -0.41667f,
        -0.96593f, 0.00000f, -0.25882f, -0.96593f, 0.00000f, -0.25882f, 0.04167f, -0.50000f,
        -0.93301f, 0.25882f, -0.25000f, -0.93301f, 0.25882f, -0.25000f, 0.04167f, -0.58333f,
        -0.83652f, 0.50000f, -0.22414f, -0.83652f, 0.50000f, -0.22414f, 0.04167f, -0.66667f,
        -0.68301f, 0.70711f, -0.18301f, -0.68301f, 0.70711f, -0.18301f, 0.04167f, -0.75000f,
        -0.48296f, 0.86603f, -0.12941f, -0.48296f, 0.86603f, -0.12941f, 0.04167f, -0.83333f,
        -0.25000f, 0.96593f, -0.06699f, -0.25000f, 0.96593f, -0.06699f, 0.04167f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.04167f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.08333f, 0.00000f,
        -0.22414f, -0.96593f, -0.12941f, -0.22414f, -0.96593f, -0.12941f, 0.08333f, -0.08333f,
        -0.43301f, -0.86603f, -0.25000f, -0.43301f, -0.86603f, -0.25000f, 0.08333f, -0.16667f,
        -0.61237f, -0.70711f, -0.35355f, -0.61237f, -0.70711f, -0.35355f, 0.08333f, -0.25000f,
        -0.75000f, -0.50000f, -0.43301f, -0.75000f, -0.50000f, -0.43301f, 0.08333f, -0.33333f,
        -0.83652f, -0.25882f, -0.48296f, -0.83652f, -0.25882f, -0.48296f, 0.08333f, -0.41667f,
        -0.86603f, 0.00000f, -0.50000f, -0.86603f, 0.00000f, -0.50000f, 0.08333f, -0.50000f,
        -0.83652f, 0.25882f, -0.48296f, -0.83652f, 0.25882f, -0.48296f, 0.08333f, -0.58333f,
        -0.75000f, 0.50000f, -0.43301f, -0.75000f, 0.50000f, -0.43301f, 0.08333f, -0.66667f,
        -0.61237f, 0.70711f, -0.35355f, -0.61237f, 0.70711f, -0.35355f, 0.08333f, -0.75000f,
        -0.43301f, 0.86603f, -0.25000f, -0.43301f, 0.86603f, -0.25000f, 0.08333f, -0.83333f,
        -0.22414f, 0.96593f, -0.12941f, -0.22414f, 0.96593f, -0.12941f, 0.08333f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.08333f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.12500f, 0.00000f,
        -0.18301f, -0.96593f, -0.18301f, -0.18301f, -0.96593f, -0.18301f, 0.12500f, -0.08333f,
        -0.35355f, -0.86603f, -0.35355f, -0.35355f, -0.86603f, -0.35355f, 0.12500f, -0.16667f,
        -0.50000f, -0.70711f, -0.50000f, -0.50000f, -0.70711f, -0.50000f, 0.12500f, -0.25000f,
        -0.61237f, -0.50000f, -0.61237f, -0.61237f, -0.50000f, -0.61237f, 0.12500f, -0.33333f,
        -0.68301f, -0.25882f, -0.68301f, -0.68301f, -0.25882f, -0.68301f, 0.12500f, -0.41667f,
        -0.70711f, 0.00000f, -0.70711f, -0.70711f, 0.00000f, -0.70711f, 0.12500f, -0.50000f,
        -0.68301f, 0.25882f, -0.68301f, -0.68301f, 0.25882f, -0.68301f, 0.12500f, -0.58333f,
        -0.61237f, 0.50000f, -0.61237f, -0.61237f, 0.50000f, -0.61237f, 0.12500f, -0.66667f,
        -0.50000f, 0.70711f, -0.50000f, -0.50000f, 0.70711f, -0.50000f, 0.12500f, -0.75000f,
        -0.35355f, 0.86603f, -0.35355f, -0.35355f, 0.86603f, -0.35355f, 0.12500f, -0.83333f,
        -0.18301f, 0.96593f, -0.18301f, -0.18301f, 0.96593f, -0.18301f, 0.12500f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.12500f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.16667f, 0.00000f,
        -0.12941f, -0.96593f, -0.22414f, -0.12941f, -0.96593f, -0.22414f, 0.16667f, -0.08333f,
        -0.25000f, -0.86603f, -0.43301f, -0.25000f, -0.86603f, -0.43301f, 0.16667f, -0.16667f,
        -0.35355f, -0.70711f, -0.61237f, -0.35355f, -0.70711f, -0.61237f, 0.16667f, -0.25000f,
        -0.43301f, -0.50000f, -0.75000f, -0.43301f, -0.50000f, -0.75000f, 0.16667f, -0.33333f,
        -0.48296f, -0.25882f, -0.83652f, -0.48296f, -0.25882f, -0.83652f, 0.16667f, -0.41667f,
        -0.50000f, 0.00000f, -0.86603f, -0.50000f, 0.00000f, -0.86603f, 0.16667f, -0.50000f,
        -0.48296f, 0.25882f, -0.83652f, -0.48296f, 0.25882f, -0.83652f, 0.16667f, -0.58333f,
        -0.43301f, 0.50000f, -0.75000f, -0.43301f, 0.50000f, -0.75000f, 0.16667f, -0.66667f,
        -0.35355f, 0.70711f, -0.61237f, -0.35355f, 0.70711f, -0.61237f, 0.16667f, -0.75000f,
        -0.25000f, 0.86603f, -0.43301f, -0.25000f, 0.86603f, -0.43301f, 0.16667f, -0.83333f,
        -0.12941f, 0.96593f, -0.22414f, -0.12941f, 0.96593f, -0.22414f, 0.16667f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.16667f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.20833f, 0.00000f,
        -0.06699f, -0.96593f, -0.25000f, -0.06699f, -0.96593f, -0.25000f, 0.20833f, -0.08333f,
        -0.12941f, -0.86603f, -0.48296f, -0.12941f, -0.86603f, -0.48296f, 0.20833f, -0.16667f,
        -0.18301f, -0.70711f, -0.68301f, -0.18301f, -0.70711f, -0.68301f, 0.20833f, -0.25000f,
        -0.22414f, -0.50000f, -0.83652f, -0.22414f, -0.50000f, -0.83652f, 0.20833f, -0.33333f,
        -0.25000f, -0.25882f, -0.93301f, -0.25000f, -0.25882f, -0.93301f, 0.20833f, -0.41667f,
        -0.25882f, 0.00000f, -0.96593f, -0.25882f, 0.00000f, -0.96593f, 0.20833f, -0.50000f,
        -0.25000f, 0.25882f, -0.93301f, -0.25000f, 0.25882f, -0.93301f, 0.20833f, -0.58333f,
        -0.22414f, 0.50000f, -0.83652f, -0.22414f, 0.50000f, -0.83652f, 0.20833f, -0.66667f,
        -0.18301f, 0.70711f, -0.68301f, -0.18301f, 0.70711f, -0.68301f, 0.20833f, -0.75000f,
        -0.12941f, 0.86603f, -0.48296f, -0.12941f, 0.86603f, -0.48296f, 0.20833f, -0.83333f,
        -0.06699f, 0.96593f, -0.25000f, -0.06699f, 0.96593f, -0.25000f, 0.20833f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.20833f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.25000f, 0.00000f,
        0.00000f, -0.96593f, -0.25882f, 0.00000f, -0.96593f, -0.25882f, 0.25000f, -0.08333f,
        0.00000f, -0.86603f, -0.50000f, 0.00000f, -0.86603f, -0.50000f, 0.25000f, -0.16667f,
        0.00000f, -0.70711f, -0.70711f, 0.00000f, -0.70711f, -0.70711f, 0.25000f, -0.25000f,
        0.00000f, -0.50000f, -0.86603f, 0.00000f, -0.50000f, -0.86603f, 0.25000f, -0.33333f,
        0.00000f, -0.25882f, -0.96593f, 0.00000f, -0.25882f, -0.96593f, 0.25000f, -0.41667f,
        0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.25000f, -0.50000f,
        0.00000f, 0.25882f, -0.96593f, 0.00000f, 0.25882f, -0.96593f, 0.25000f, -0.58333f,
        0.00000f, 0.50000f, -0.86603f, 0.00000f, 0.50000f, -0.86603f, 0.25000f, -0.66667f,
        0.00000f, 0.70711f, -0.70711f, 0.00000f, 0.70711f, -0.70711f, 0.25000f, -0.75000f,
        0.00000f, 0.86603f, -0.50000f, 0.00000f, 0.86603f, -0.50000f, 0.25000f, -0.83333f,
        0.00000f, 0.96593f, -0.25882f, 0.00000f, 0.96593f, -0.25882f, 0.25000f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.25000f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.29167f, 0.00000f,
        0.06699f, -0.96593f, -0.25000f, 0.06699f, -0.96593f, -0.25000f, 0.29167f, -0.08333f,
        0.12941f, -0.86603f, -0.48296f, 0.12941f, -0.86603f, -0.48296f, 0.29167f, -0.16667f,
        0.18301f, -0.70711f, -0.68301f, 0.18301f, -0.70711f, -0.68301f, 0.29167f, -0.25000f,
        0.22414f, -0.50000f, -0.83652f, 0.22414f, -0.50000f, -0.83652f, 0.29167f, -0.33333f,
        0.25000f, -0.25882f, -0.93301f, 0.25000f, -0.25882f, -0.93301f, 0.29167f, -0.41667f,
        0.25882f, 0.00000f, -0.96593f, 0.25882f, 0.00000f, -0.96593f, 0.29167f, -0.50000f,
        0.25000f, 0.25882f, -0.93301f, 0.25000f, 0.25882f, -0.93301f, 0.29167f, -0.58333f,
        0.22414f, 0.50000f, -0.83652f, 0.22414f, 0.50000f, -0.83652f, 0.29167f, -0.66667f,
        0.18301f, 0.70711f, -0.68301f, 0.18301f, 0.70711f, -0.68301f, 0.29167f, -0.75000f,
        0.12941f, 0.86603f, -0.48296f, 0.12941f, 0.86603f, -0.48296f, 0.29167f, -0.83333f,
        0.06699f, 0.96593f, -0.25000f, 0.06699f, 0.96593f, -0.25000f, 0.29167f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.29167f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.33333f, 0.00000f,
        0.12941f, -0.96593f, -0.22414f, 0.12941f, -0.96593f, -0.22414f, 0.33333f, -0.08333f,
        0.25000f, -0.86603f, -0.43301f, 0.25000f, -0.86603f, -0.43301f, 0.33333f, -0.16667f,
        0.35355f, -0.70711f, -0.61237f, 0.35355f, -0.70711f, -0.61237f, 0.33333f, -0.25000f,
        0.43301f, -0.50000f, -0.75000f, 0.43301f, -0.50000f, -0.75000f, 0.33333f, -0.33333f,
        0.48296f, -0.25882f, -0.83652f, 0.48296f, -0.25882f, -0.83652f, 0.33333f, -0.41667f,
        0.50000f, 0.00000f, -0.86603f, 0.50000f, 0.00000f, -0.86603f, 0.33333f, -0.50000f,
        0.48296f, 0.25882f, -0.83652f, 0.48296f, 0.25882f, -0.83652f, 0.33333f, -0.58333f,
        0.43301f, 0.50000f, -0.75000f, 0.43301f, 0.50000f, -0.75000f, 0.33333f, -0.66667f,
        0.35355f, 0.70711f, -0.61237f, 0.35355f, 0.70711f, -0.61237f, 0.33333f, -0.75000f,
        0.25000f, 0.86603f, -0.43301f, 0.25000f, 0.86603f, -0.43301f, 0.33333f, -0.83333f,
        0.12941f, 0.96593f, -0.22414f, 0.12941f, 0.96593f, -0.22414f, 0.33333f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.33333f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.37500f, 0.00000f,
        0.18301f, -0.96593f, -0.18301f, 0.18301f, -0.96593f, -0.18301f, 0.37500f, -0.08333f,
        0.35355f, -0.86603f, -0.35355f, 0.35355f, -0.86603f, -0.35355f, 0.37500f, -0.16667f,
        0.50000f, -0.70711f, -0.50000f, 0.50000f, -0.70711f, -0.50000f, 0.37500f, -0.25000f,
        0.61237f, -0.50000f, -0.61237f, 0.61237f, -0.50000f, -0.61237f, 0.37500f, -0.33333f,
        0.68301f, -0.25882f, -0.68301f, 0.68301f, -0.25882f, -0.68301f, 0.37500f, -0.41667f,
        0.70711f, 0.00000f, -0.70711f, 0.70711f, 0.00000f, -0.70711f, 0.37500f, -0.50000f,
        0.68301f, 0.25882f, -0.68301f, 0.68301f, 0.25882f, -0.68301f, 0.37500f, -0.58333f,
        0.61237f, 0.50000f, -0.61237f, 0.61237f, 0.50000f, -0.61237f, 0.37500f, -0.66667f,
        0.50000f, 0.70711f, -0.50000f, 0.50000f, 0.70711f, -0.50000f, 0.37500f, -0.75000f,
        0.35355f, 0.86603f, -0.35355f, 0.35355f, 0.86603f, -0.35355f, 0.37500f, -0.83333f,
        0.18301f, 0.96593f, -0.18301f, 0.18301f, 0.96593f, -0.18301f, 0.37500f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.37500f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.41667f, 0.00000f,
        0.22414f, -0.96593f, -0.12941f, 0.22414f, -0.96593f, -0.12941f, 0.41667f, -0.08333f,
        0.43301f, -0.86603f, -0.25000f, 0.43301f, -0.86603f, -0.25000f, 0.41667f, -0.16667f,
        0.61237f, -0.70711f, -0.35355f, 0.61237f, -0.70711f, -0.35355f, 0.41667f, -0.25000f,
        0.75000f, -0.50000f, -0.43301f, 0.75000f, -0.50000f, -0.43301f, 0.41667f, -0.33333f,
        0.83652f, -0.25882f, -0.48296f, 0.83652f, -0.25882f, -0.48296f, 0.41667f, -0.41667f,
        0.86603f, 0.00000f, -0.50000f, 0.86603f, 0.00000f, -0.50000f, 0.41667f, -0.50000f,
        0.83652f, 0.25882f, -0.48296f, 0.83652f, 0.25882f, -0.48296f, 0.41667f, -0.58333f,
        0.75000f, 0.50000f, -0.43301f, 0.75000f, 0.50000f, -0.43301f, 0.41667f, -0.66667f,
        0.61237f, 0.70711f, -0.35355f, 0.61237f, 0.70711f, -0.35355f, 0.41667f, -0.75000f,
        0.43301f, 0.86603f, -0.25000f, 0.43301f, 0.86603f, -0.25000f, 0.41667f, -0.83333f,
        0.22414f, 0.96593f, -0.12941f, 0.22414f, 0.96593f, -0.12941f, 0.41667f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.41667f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.45833f, 0.00000f,
        0.25000f, -0.96593f, -0.06699f, 0.25000f, -0.96593f, -0.06699f, 0.45833f, -0.08333f,
        0.48296f, -0.86603f, -0.12941f, 0.48296f, -0.86603f, -0.12941f, 0.45833f, -0.16667f,
        0.68301f, -0.70711f, -0.18301f, 0.68301f, -0.70711f, -0.18301f, 0.45833f, -0.25000f,
        0.83652f, -0.50000f, -0.22414f, 0.83652f, -0.50000f, -0.22414f, 0.45833f, -0.33333f,
        0.93301f, -0.25882f, -0.25000f, 0.93301f, -0.25882f, -0.25000f, 0.45833f, -0.41667f,
        0.96593f, 0.00000f, -0.25882f, 0.96593f, 0.00000f, -0.25882f, 0.45833f, -0.50000f,
        0.93301f, 0.25882f, -0.25000f, 0.93301f, 0.25882f, -0.25000f, 0.45833f, -0.58333f,
        0.83652f, 0.50000f, -0.22414f, 0.83652f, 0.50000f, -0.22414f, 0.45833f, -0.66667f,
        0.68301f, 0.70711f, -0.18301f, 0.68301f, 0.70711f, -0.18301f, 0.45833f, -0.75000f,
        0.48296f, 0.86603f, -0.12941f, 0.48296f, 0.86603f, -0.12941f, 0.45833f, -0.83333f,
        0.25000f, 0.96593f, -0.06699f, 0.25000f, 0.96593f, -0.06699f, 0.45833f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.45833f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.50000f, 0.00000f,
        0.25882f, -0.96593f, 0.00000f, 0.25882f, -0.96593f, 0.00000f, 0.50000f, -0.08333f,
        0.50000f, -0.86603f, 0.00000f, 0.50000f, -0.86603f, 0.00000f, 0.50000f, -0.16667f,
        0.70711f, -0.70711f, 0.00000f, 0.70711f, -0.70711f, 0.00000f, 0.50000f, -0.25000f,
        0.86603f, -0.50000f, 0.00000f, 0.86603f, -0.50000f, 0.00000f, 0.50000f, -0.33333f,
        0.96593f, -0.25882f, 0.00000f, 0.96593f, -0.25882f, 0.00000f, 0.50000f, -0.41667f,
        1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.00000f, 0.50000f, -0.50000f,
        0.96593f, 0.25882f, 0.00000f, 0.96593f, 0.25882f, 0.00000f, 0.50000f, -0.58333f,
        0.86603f, 0.50000f, 0.00000f, 0.86603f, 0.50000f, 0.00000f, 0.50000f, -0.66667f,
        0.70711f, 0.70711f, 0.00000f, 0.70711f, 0.70711f, 0.00000f, 0.50000f, -0.75000f,
        0.50000f, 0.86603f, 0.00000f, 0.50000f, 0.86603f, 0.00000f, 0.50000f, -0.83333f,
        0.25882f, 0.96593f, 0.00000f, 0.25882f, 0.96593f, 0.00000f, 0.50000f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.50000f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.54167f, 0.00000f,
        0.25000f, -0.96593f, 0.06699f, 0.25000f, -0.96593f, 0.06699f, 0.54167f, -0.08333f,
        0.48296f, -0.86603f, 0.12941f, 0.48296f, -0.86603f, 0.12941f, 0.54167f, -0.16667f,
        0.68301f, -0.70711f, 0.18301f, 0.68301f, -0.70711f, 0.18301f, 0.54167f, -0.25000f,
        0.83652f, -0.50000f, 0.22414f, 0.83652f, -0.50000f, 0.22414f, 0.54167f, -0.33333f,
        0.93301f, -0.25882f, 0.25000f, 0.93301f, -0.25882f, 0.25000f, 0.54167f, -0.41667f,
        0.96593f, 0.00000f, 0.25882f, 0.96593f, 0.00000f, 0.25882f, 0.54167f, -0.50000f,
        0.93301f, 0.25882f, 0.25000f, 0.93301f, 0.25882f, 0.25000f, 0.54167f, -0.58333f,
        0.83652f, 0.50000f, 0.22414f, 0.83652f, 0.50000f, 0.22414f, 0.54167f, -0.66667f,
        0.68301f, 0.70711f, 0.18301f, 0.68301f, 0.70711f, 0.18301f, 0.54167f, -0.75000f,
        0.48296f, 0.86603f, 0.12941f, 0.48296f, 0.86603f, 0.12941f, 0.54167f, -0.83333f,
        0.25000f, 0.96593f, 0.06699f, 0.25000f, 0.96593f, 0.06699f, 0.54167f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.54167f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.58333f, 0.00000f,
        0.22414f, -0.96593f, 0.12941f, 0.22414f, -0.96593f, 0.12941f, 0.58333f, -0.08333f,
        0.43301f, -0.86603f, 0.25000f, 0.43301f, -0.86603f, 0.25000f, 0.58333f, -0.16667f,
        0.61237f, -0.70711f, 0.35355f, 0.61237f, -0.70711f, 0.35355f, 0.58333f, -0.25000f,
        0.75000f, -0.50000f, 0.43301f, 0.75000f, -0.50000f, 0.43301f, 0.58333f, -0.33333f,
        0.83652f, -0.25882f, 0.48296f, 0.83652f, -0.25882f, 0.48296f, 0.58333f, -0.41667f,
        0.86603f, 0.00000f, 0.50000f, 0.86603f, 0.00000f, 0.50000f, 0.58333f, -0.50000f,
        0.83652f, 0.25882f, 0.48296f, 0.83652f, 0.25882f, 0.48296f, 0.58333f, -0.58333f,
        0.75000f, 0.50000f, 0.43301f, 0.75000f, 0.50000f, 0.43301f, 0.58333f, -0.66667f,
        0.61237f, 0.70711f, 0.35355f, 0.61237f, 0.70711f, 0.35355f, 0.58333f, -0.75000f,
        0.43301f, 0.86603f, 0.25000f, 0.43301f, 0.86603f, 0.25000f, 0.58333f, -0.83333f,
        0.22414f, 0.96593f, 0.12941f, 0.22414f, 0.96593f, 0.12941f, 0.58333f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.58333f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.62500f, 0.00000f,
        0.18301f, -0.96593f, 0.18301f, 0.18301f, -0.96593f, 0.18301f, 0.62500f, -0.08333f,
        0.35355f, -0.86603f, 0.35355f, 0.35355f, -0.86603f, 0.35355f, 0.62500f, -0.16667f,
        0.50000f, -0.70711f, 0.50000f, 0.50000f, -0.70711f, 0.50000f, 0.62500f, -0.25000f,
        0.61237f, -0.50000f, 0.61237f, 0.61237f, -0.50000f, 0.61237f, 0.62500f, -0.33333f,
        0.68301f, -0.25882f, 0.68301f, 0.68301f, -0.25882f, 0.68301f, 0.62500f, -0.41667f,
        0.70711f, 0.00000f, 0.70711f, 0.70711f, 0.00000f, 0.70711f, 0.62500f, -0.50000f,
        0.68301f, 0.25882f, 0.68301f, 0.68301f, 0.25882f, 0.68301f, 0.62500f, -0.58333f,
        0.61237f, 0.50000f, 0.61237f, 0.61237f, 0.50000f, 0.61237f, 0.62500f, -0.66667f,
        0.50000f, 0.70711f, 0.50000f, 0.50000f, 0.70711f, 0.50000f, 0.62500f, -0.75000f,
        0.35355f, 0.86603f, 0.35355f, 0.35355f, 0.86603f, 0.35355f, 0.62500f, -0.83333f,
        0.18301f, 0.96593f, 0.18301f, 0.18301f, 0.96593f, 0.18301f, 0.62500f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.62500f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.66667f, 0.00000f,
        0.12941f, -0.96593f, 0.22414f, 0.12941f, -0.96593f, 0.22414f, 0.66667f, -0.08333f,
        0.25000f, -0.86603f, 0.43301f, 0.25000f, -0.86603f, 0.43301f, 0.66667f, -0.16667f,
        0.35355f, -0.70711f, 0.61237f, 0.35355f, -0.70711f, 0.61237f, 0.66667f, -0.25000f,
        0.43301f, -0.50000f, 0.75000f, 0.43301f, -0.50000f, 0.75000f, 0.66667f, -0.33333f,
        0.48296f, -0.25882f, 0.83652f, 0.48296f, -0.25882f, 0.83652f, 0.66667f, -0.41667f,
        0.50000f, 0.00000f, 0.86603f, 0.50000f, 0.00000f, 0.86603f, 0.66667f, -0.50000f,
        0.48296f, 0.25882f, 0.83652f, 0.48296f, 0.25882f, 0.83652f, 0.66667f, -0.58333f,
        0.43301f, 0.50000f, 0.75000f, 0.43301f, 0.50000f, 0.75000f, 0.66667f, -0.66667f,
        0.35355f, 0.70711f, 0.61237f, 0.35355f, 0.70711f, 0.61237f, 0.66667f, -0.75000f,
        0.25000f, 0.86603f, 0.43301f, 0.25000f, 0.86603f, 0.43301f, 0.66667f, -0.83333f,
        0.12941f, 0.96593f, 0.22414f, 0.12941f, 0.96593f, 0.22414f, 0.66667f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.66667f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.70833f, 0.00000f,
        0.06699f, -0.96593f, 0.25000f, 0.06699f, -0.96593f, 0.25000f, 0.70833f, -0.08333f,
        0.12941f, -0.86603f, 0.48296f, 0.12941f, -0.86603f, 0.48296f, 0.70833f, -0.16667f,
        0.18301f, -0.70711f, 0.68301f, 0.18301f, -0.70711f, 0.68301f, 0.70833f, -0.25000f,
        0.22414f, -0.50000f, 0.83652f, 0.22414f, -0.50000f, 0.83652f, 0.70833f, -0.33333f,
        0.25000f, -0.25882f, 0.93301f, 0.25000f, -0.25882f, 0.93301f, 0.70833f, -0.41667f,
        0.25882f, 0.00000f, 0.96593f, 0.25882f, 0.00000f, 0.96593f, 0.70833f, -0.50000f,
        0.25000f, 0.25882f, 0.93301f, 0.25000f, 0.25882f, 0.93301f, 0.70833f, -0.58333f,
        0.22414f, 0.50000f, 0.83652f, 0.22414f, 0.50000f, 0.83652f, 0.70833f, -0.66667f,
        0.18301f, 0.70711f, 0.68301f, 0.18301f, 0.70711f, 0.68301f, 0.70833f, -0.75000f,
        0.12941f, 0.86603f, 0.48296f, 0.12941f, 0.86603f, 0.48296f, 0.70833f, -0.83333f,
        0.06699f, 0.96593f, 0.25000f, 0.06699f, 0.96593f, 0.25000f, 0.70833f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.70833f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.75000f, 0.00000f,
        0.00000f, -0.96593f, 0.25882f, 0.00000f, -0.96593f, 0.25882f, 0.75000f, -0.08333f,
        0.00000f, -0.86603f, 0.50000f, 0.00000f, -0.86603f, 0.50000f, 0.75000f, -0.16667f,
        0.00000f, -0.70711f, 0.70711f, 0.00000f, -0.70711f, 0.70711f, 0.75000f, -0.25000f,
        0.00000f, -0.50000f, 0.86603f, 0.00000f, -0.50000f, 0.86603f, 0.75000f, -0.33333f,
        0.00000f, -0.25882f, 0.96593f, 0.00000f, -0.25882f, 0.96593f, 0.75000f, -0.41667f,
        0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.75000f, -0.50000f,
        0.00000f, 0.25882f, 0.96593f, 0.00000f, 0.25882f, 0.96593f, 0.75000f, -0.58333f,
        0.00000f, 0.50000f, 0.86603f, 0.00000f, 0.50000f, 0.86603f, 0.75000f, -0.66667f,
        0.00000f, 0.70711f, 0.70711f, 0.00000f, 0.70711f, 0.70711f, 0.75000f, -0.75000f,
        0.00000f, 0.86603f, 0.50000f, 0.00000f, 0.86603f, 0.50000f, 0.75000f, -0.83333f,
        0.00000f, 0.96593f, 0.25882f, 0.00000f, 0.96593f, 0.25882f, 0.75000f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.75000f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.79167f, 0.00000f,
        -0.06699f, -0.96593f, 0.25000f, -0.06699f, -0.96593f, 0.25000f, 0.79167f, -0.08333f,
        -0.12941f, -0.86603f, 0.48296f, -0.12941f, -0.86603f, 0.48296f, 0.79167f, -0.16667f,
        -0.18301f, -0.70711f, 0.68301f, -0.18301f, -0.70711f, 0.68301f, 0.79167f, -0.25000f,
        -0.22414f, -0.50000f, 0.83652f, -0.22414f, -0.50000f, 0.83652f, 0.79167f, -0.33333f,
        -0.25000f, -0.25882f, 0.93301f, -0.25000f, -0.25882f, 0.93301f, 0.79167f, -0.41667f,
        -0.25882f, 0.00000f, 0.96593f, -0.25882f, 0.00000f, 0.96593f, 0.79167f, -0.50000f,
        -0.25000f, 0.25882f, 0.93301f, -0.25000f, 0.25882f, 0.93301f, 0.79167f, -0.58333f,
        -0.22414f, 0.50000f, 0.83652f, -0.22414f, 0.50000f, 0.83652f, 0.79167f, -0.66667f,
        -0.18301f, 0.70711f, 0.68301f, -0.18301f, 0.70711f, 0.68301f, 0.79167f, -0.75000f,
        -0.12941f, 0.86603f, 0.48296f, -0.12941f, 0.86603f, 0.48296f, 0.79167f, -0.83333f,
        -0.06699f, 0.96593f, 0.25000f, -0.06699f, 0.96593f, 0.25000f, 0.79167f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.79167f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.83333f, 0.00000f,
        -0.12941f, -0.96593f, 0.22414f, -0.12941f, -0.96593f, 0.22414f, 0.83333f, -0.08333f,
        -0.25000f, -0.86603f, 0.43301f, -0.25000f, -0.86603f, 0.43301f, 0.83333f, -0.16667f,
        -0.35355f, -0.70711f, 0.61237f, -0.35355f, -0.70711f, 0.61237f, 0.83333f, -0.25000f,
        -0.43301f, -0.50000f, 0.75000f, -0.43301f, -0.50000f, 0.75000f, 0.83333f, -0.33333f,
        -0.48296f, -0.25882f, 0.83652f, -0.48296f, -0.25882f, 0.83652f, 0.83333f, -0.41667f,
        -0.50000f, 0.00000f, 0.86603f, -0.50000f, 0.00000f, 0.86603f, 0.83333f, -0.50000f,
        -0.48296f, 0.25882f, 0.83652f, -0.48296f, 0.25882f, 0.83652f, 0.83333f, -0.58333f,
        -0.43301f, 0.50000f, 0.75000f, -0.43301f, 0.50000f, 0.75000f, 0.83333f, -0.66667f,
        -0.35355f, 0.70711f, 0.61237f, -0.35355f, 0.70711f, 0.61237f, 0.83333f, -0.75000f,
        -0.25000f, 0.86603f, 0.43301f, -0.25000f, 0.86603f, 0.43301f, 0.83333f, -0.83333f,
        -0.12941f, 0.96593f, 0.22414f, -0.12941f, 0.96593f, 0.22414f, 0.83333f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.83333f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.87500f, 0.00000f,
        -0.18301f, -0.96593f, 0.18301f, -0.18301f, -0.96593f, 0.18301f, 0.87500f, -0.08333f,
        -0.35355f, -0.86603f, 0.35355f, -0.35355f, -0.86603f, 0.35355f, 0.87500f, -0.16667f,
        -0.50000f, -0.70711f, 0.50000f, -0.50000f, -0.70711f, 0.50000f, 0.87500f, -0.25000f,
        -0.61237f, -0.50000f, 0.61237f, -0.61237f, -0.50000f, 0.61237f, 0.87500f, -0.33333f,
        -0.68301f, -0.25882f, 0.68301f, -0.68301f, -0.25882f, 0.68301f, 0.87500f, -0.41667f,
        -0.70711f, 0.00000f, 0.70711f, -0.70711f, 0.00000f, 0.70711f, 0.87500f, -0.50000f,
        -0.68301f, 0.25882f, 0.68301f, -0.68301f, 0.25882f, 0.68301f, 0.87500f, -0.58333f,
        -0.61237f, 0.50000f, 0.61237f, -0.61237f, 0.50000f, 0.61237f, 0.87500f, -0.66667f,
        -0.50000f, 0.70711f, 0.50000f, -0.50000f, 0.70711f, 0.50000f, 0.87500f, -0.75000f,
        -0.35355f, 0.86603f, 0.35355f, -0.35355f, 0.86603f, 0.35355f, 0.87500f, -0.83333f,
        -0.18301f, 0.96593f, 0.18301f, -0.18301f, 0.96593f, 0.18301f, 0.87500f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.87500f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.91667f, 0.00000f,
        -0.22414f, -0.96593f, 0.12941f, -0.22414f, -0.96593f, 0.12941f, 0.91667f, -0.08333f,
        -0.43301f, -0.86603f, 0.25000f, -0.43301f, -0.86603f, 0.25000f, 0.91667f, -0.16667f,
        -0.61237f, -0.70711f, 0.35355f, -0.61237f, -0.70711f, 0.35355f, 0.91667f, -0.25000f,
        -0.75000f, -0.50000f, 0.43301f, -0.75000f, -0.50000f, 0.43301f, 0.91667f, -0.33333f,
        -0.83652f, -0.25882f, 0.48296f, -0.83652f, -0.25882f, 0.48296f, 0.91667f, -0.41667f,
        -0.86603f, 0.00000f, 0.50000f, -0.86603f, 0.00000f, 0.50000f, 0.91667f, -0.50000f,
        -0.83652f, 0.25882f, 0.48296f, -0.83652f, 0.25882f, 0.48296f, 0.91667f, -0.58333f,
        -0.75000f, 0.50000f, 0.43301f, -0.75000f, 0.50000f, 0.43301f, 0.91667f, -0.66667f,
        -0.61237f, 0.70711f, 0.35355f, -0.61237f, 0.70711f, 0.35355f, 0.91667f, -0.75000f,
        -0.43301f, 0.86603f, 0.25000f, -0.43301f, 0.86603f, 0.25000f, 0.91667f, -0.83333f,
        -0.22414f, 0.96593f, 0.12941f, -0.22414f, 0.96593f, 0.12941f, 0.91667f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.91667f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.95833f, 0.00000f,
        -0.25000f, -0.96593f, 0.06699f, -0.25000f, -0.96593f, 0.06699f, 0.95833f, -0.08333f,
        -0.48296f, -0.86603f, 0.12941f, -0.48296f, -0.86603f, 0.12941f, 0.95833f, -0.16667f,
        -0.68301f, -0.70711f, 0.18301f, -0.68301f, -0.70711f, 0.18301f, 0.95833f, -0.25000f,
        -0.83652f, -0.50000f, 0.22414f, -0.83652f, -0.50000f, 0.22414f, 0.95833f, -0.33333f,
        -0.93301f, -0.25882f, 0.25000f, -0.93301f, -0.25882f, 0.25000f, 0.95833f, -0.41667f,
        -0.96593f, 0.00000f, 0.25882f, -0.96593f, 0.00000f, 0.25882f, 0.95833f, -0.50000f,
        -0.93301f, 0.25882f, 0.25000f, -0.93301f, 0.25882f, 0.25000f, 0.95833f, -0.58333f,
        -0.83652f, 0.50000f, 0.22414f, -0.83652f, 0.50000f, 0.22414f, 0.95833f, -0.66667f,
        -0.68301f, 0.70711f, 0.18301f, -0.68301f, 0.70711f, 0.18301f, 0.95833f, -0.75000f,
        -0.48296f, 0.86603f, 0.12941f, -0.48296f, 0.86603f, 0.12941f, 0.95833f, -0.83333f,
        -0.25000f, 0.96593f, 0.06699f, -0.25000f, 0.96593f, 0.06699f, 0.95833f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 0.95833f, -1.00000f,
        0.00000f, -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 1.00000f, 0.00000f,
        -0.25882f, -0.96593f, 0.00000f, -0.25882f, -0.96593f, 0.00000f, 1.00000f, -0.08333f,
        -0.50000f, -0.86603f, 0.00000f, -0.50000f, -0.86603f, 0.00000f, 1.00000f, -0.16667f,
        -0.70711f, -0.70711f, 0.00000f, -0.70711f, -0.70711f, 0.00000f, 1.00000f, -0.25000f,
        -0.86603f, -0.50000f, 0.00000f, -0.86603f, -0.50000f, 0.00000f, 1.00000f, -0.33333f,
        -0.96593f, -0.25882f, 0.00000f, -0.96593f, -0.25882f, 0.00000f, 1.00000f, -0.41667f,
        -1.00000f, 0.00000f, 0.00000f, -1.00000f, 0.00000f, 0.00000f, 1.00000f, -0.50000f,
        -0.96593f, 0.25882f, 0.00000f, -0.96593f, 0.25882f, 0.00000f, 1.00000f, -0.58333f,
        -0.86603f, 0.50000f, 0.00000f, -0.86603f, 0.50000f, 0.00000f, 1.00000f, -0.66667f,
        -0.70711f, 0.70711f, 0.00000f, -0.70711f, 0.70711f, 0.00000f, 1.00000f, -0.75000f,
        -0.50000f, 0.86603f, 0.00000f, -0.50000f, 0.86603f, 0.00000f, 1.00000f, -0.83333f,
        -0.25882f, 0.96593f, 0.00000f, -0.25882f, 0.96593f, 0.00000f, 1.00000f, -0.91667f,
        0.00000f, 1.00000f, 0.00000f, 0.00000f, 1.00000f, 0.00000f, 1.00000f, -1.00000f
    };
    
    std::vector<uint32_t> indices = {
        0, 1, 13,
        1, 14, 13,
        1, 2, 14,
        2, 15, 14,
        2, 3, 15,
        3, 16, 15,
        3, 4, 16,
        4, 17, 16,
        4, 5, 17,
        5, 18, 17,
        5, 6, 18,
        6, 19, 18,
        6, 7, 19,
        7, 20, 19,
        7, 8, 20,
        8, 21, 20,
        8, 9, 21,
        9, 22, 21,
        9, 10, 22,
        10, 23, 22,
        10, 11, 23,
        11, 24, 23,
        11, 12, 24,
        12, 25, 24,
        13, 14, 26,
        14, 27, 26,
        14, 15, 27,
        15, 28, 27,
        15, 16, 28,
        16, 29, 28,
        16, 17, 29,
        17, 30, 29,
        17, 18, 30,
        18, 31, 30,
        18, 19, 31,
        19, 32, 31,
        19, 20, 32,
        20, 33, 32,
        20, 21, 33,
        21, 34, 33,
        21, 22, 34,
        22, 35, 34,
        22, 23, 35,
        23, 36, 35,
        23, 24, 36,
        24, 37, 36,
        24, 25, 37,
        25, 38, 37,
        26, 27, 39,
        27, 40, 39,
        27, 28, 40,
        28, 41, 40,
        28, 29, 41,
        29, 42, 41,
        29, 30, 42,
        30, 43, 42,
        30, 31, 43,
        31, 44, 43,
        31, 32, 44,
        32, 45, 44,
        32, 33, 45,
        33, 46, 45,
        33, 34, 46,
        34, 47, 46,
        34, 35, 47,
        35, 48, 47,
        35, 36, 48,
        36, 49, 48,
        36, 37, 49,
        37, 50, 49,
        37, 38, 50,
        38, 51, 50,
        39, 40, 52,
        40, 53, 52,
        40, 41, 53,
        41, 54, 53,
        41, 42, 54,
        42, 55, 54,
        42, 43, 55,
        43, 56, 55,
        43, 44, 56,
        44, 57, 56,
        44, 45, 57,
        45, 58, 57,
        45, 46, 58,
        46, 59, 58,
        46, 47, 59,
        47, 60, 59,
        47, 48, 60,
        48, 61, 60,
        48, 49, 61,
        49, 62, 61,
        49, 50, 62,
        50, 63, 62,
        50, 51, 63,
        51, 64, 63,
        52, 53, 65,
        53, 66, 65,
        53, 54, 66,
        54, 67, 66,
        54, 55, 67,
        55, 68, 67,
        55, 56, 68,
        56, 69, 68,
        56, 57, 69,
        57, 70, 69,
        57, 58, 70,
        58, 71, 70,
        58, 59, 71,
        59, 72, 71,
        59, 60, 72,
        60, 73, 72,
        60, 61, 73,
        61, 74, 73,
        61, 62, 74,
        62, 75, 74,
        62, 63, 75,
        63, 76, 75,
        63, 64, 76,
        64, 77, 76,
        65, 66, 78,
        66, 79, 78,
        66, 67, 79,
        67, 80, 79,
        67, 68, 80,
        68, 81, 80,
        68, 69, 81,
        69, 82, 81,
        69, 70, 82,
        70, 83, 82,
        70, 71, 83,
        71, 84, 83,
        71, 72, 84,
        72, 85, 84,
        72, 73, 85,
        73, 86, 85,
        73, 74, 86,
        74, 87, 86,
        74, 75, 87,
        75, 88, 87,
        75, 76, 88,
        76, 89, 88,
        76, 77, 89,
        77, 90, 89,
        78, 79, 91,
        79, 92, 91,
        79, 80, 92,
        80, 93, 92,
        80, 81, 93,
        81, 94, 93,
        81, 82, 94,
        82, 95, 94,
        82, 83, 95,
        83, 96, 95,
        83, 84, 96,
        84, 97, 96,
        84, 85, 97,
        85, 98, 97,
        85, 86, 98,
        86, 99, 98,
        86, 87, 99,
        87, 100, 99,
        87, 88, 100,
        88, 101, 100,
        88, 89, 101,
        89, 102, 101,
        89, 90, 102,
        90, 103, 102,
        91, 92, 104,
        92, 105, 104,
        92, 93, 105,
        93, 106, 105,
        93, 94, 106,
        94, 107, 106,
        94, 95, 107,
        95, 108, 107,
        95, 96, 108,
        96, 109, 108,
        96, 97, 109,
        97, 110, 109,
        97, 98, 110,
        98, 111, 110,
        98, 99, 111,
        99, 112, 111,
        99, 100, 112,
        100, 113, 112,
        100, 101, 113,
        101, 114, 113,
        101, 102, 114,
        102, 115, 114,
        102, 103, 115,
        103, 116, 115,
        104, 105, 117,
        105, 118, 117,
        105, 106, 118,
        106, 119, 118,
        106, 107, 119,
        107, 120, 119,
        107, 108, 120,
        108, 121, 120,
        108, 109, 121,
        109, 122, 121,
        109, 110, 122,
        110, 123, 122,
        110, 111, 123,
        111, 124, 123,
        111, 112, 124,
        112, 125, 124,
        112, 113, 125,
        113, 126, 125,
        113, 114, 126,
        114, 127, 126,
        114, 115, 127,
        115, 128, 127,
        115, 116, 128,
        116, 129, 128,
        117, 118, 130,
        118, 131, 130,
        118, 119, 131,
        119, 132, 131,
        119, 120, 132,
        120, 133, 132,
        120, 121, 133,
        121, 134, 133,
        121, 122, 134,
        122, 135, 134,
        122, 123, 135,
        123, 136, 135,
        123, 124, 136,
        124, 137, 136,
        124, 125, 137,
        125, 138, 137,
        125, 126, 138,
        126, 139, 138,
        126, 127, 139,
        127, 140, 139,
        127, 128, 140,
        128, 141, 140,
        128, 129, 141,
        129, 142, 141,
        130, 131, 143,
        131, 144, 143,
        131, 132, 144,
        132, 145, 144,
        132, 133, 145,
        133, 146, 145,
        133, 134, 146,
        134, 147, 146,
        134, 135, 147,
        135, 148, 147,
        135, 136, 148,
        136, 149, 148,
        136, 137, 149,
        137, 150, 149,
        137, 138, 150,
        138, 151, 150,
        138, 139, 151,
        139, 152, 151,
        139, 140, 152,
        140, 153, 152,
        140, 141, 153,
        141, 154, 153,
        141, 142, 154,
        142, 155, 154,
        143, 144, 156,
        144, 157, 156,
        144, 145, 157,
        145, 158, 157,
        145, 146, 158,
        146, 159, 158,
        146, 147, 159,
        147, 160, 159,
        147, 148, 160,
        148, 161, 160,
        148, 149, 161,
        149, 162, 161,
        149, 150, 162,
        150, 163, 162,
        150, 151, 163,
        151, 164, 163,
        151, 152, 164,
        152, 165, 164,
        152, 153, 165,
        153, 166, 165,
        153, 154, 166,
        154, 167, 166,
        154, 155, 167,
        155, 168, 167,
        156, 157, 169,
        157, 170, 169,
        157, 158, 170,
        158, 171, 170,
        158, 159, 171,
        159, 172, 171,
        159, 160, 172,
        160, 173, 172,
        160, 161, 173,
        161, 174, 173,
        161, 162, 174,
        162, 175, 174,
        162, 163, 175,
        163, 176, 175,
        163, 164, 176,
        164, 177, 176,
        164, 165, 177,
        165, 178, 177,
        165, 166, 178,
        166, 179, 178,
        166, 167, 179,
        167, 180, 179,
        167, 168, 180,
        168, 181, 180,
        169, 170, 182,
        170, 183, 182,
        170, 171, 183,
        171, 184, 183,
        171, 172, 184,
        172, 185, 184,
        172, 173, 185,
        173, 186, 185,
        173, 174, 186,
        174, 187, 186,
        174, 175, 187,
        175, 188, 187,
        175, 176, 188,
        176, 189, 188,
        176, 177, 189,
        177, 190, 189,
        177, 178, 190,
        178, 191, 190,
        178, 179, 191,
        179, 192, 191,
        179, 180, 192,
        180, 193, 192,
        180, 181, 193,
        181, 194, 193,
        182, 183, 195,
        183, 196, 195,
        183, 184, 196,
        184, 197, 196,
        184, 185, 197,
        185, 198, 197,
        185, 186, 198,
        186, 199, 198,
        186, 187, 199,
        187, 200, 199,
        187, 188, 200,
        188, 201, 200,
        188, 189, 201,
        189, 202, 201,
        189, 190, 202,
        190, 203, 202,
        190, 191, 203,
        191, 204, 203,
        191, 192, 204,
        192, 205, 204,
        192, 193, 205,
        193, 206, 205,
        193, 194, 206,
        194, 207, 206,
        195, 196, 208,
        196, 209, 208,
        196, 197, 209,
        197, 210, 209,
        197, 198, 210,
        198, 211, 210,
        198, 199, 211,
        199, 212, 211,
        199, 200, 212,
        200, 213, 212,
        200, 201, 213,
        201, 214, 213,
        201, 202, 214,
        202, 215, 214,
        202, 203, 215,
        203, 216, 215,
        203, 204, 216,
        204, 217, 216,
        204, 205, 217,
        205, 218, 217,
        205, 206, 218,
        206, 219, 218,
        206, 207, 219,
        207, 220, 219,
        208, 209, 221,
        209, 222, 221,
        209, 210, 222,
        210, 223, 222,
        210, 211, 223,
        211, 224, 223,
        211, 212, 224,
        212, 225, 224,
        212, 213, 225,
        213, 226, 225,
        213, 214, 226,
        214, 227, 226,
        214, 215, 227,
        215, 228, 227,
        215, 216, 228,
        216, 229, 228,
        216, 217, 229,
        217, 230, 229,
        217, 218, 230,
        218, 231, 230,
        218, 219, 231,
        219, 232, 231,
        219, 220, 232,
        220, 233, 232,
        221, 222, 234,
        222, 235, 234,
        222, 223, 235,
        223, 236, 235,
        223, 224, 236,
        224, 237, 236,
        224, 225, 237,
        225, 238, 237,
        225, 226, 238,
        226, 239, 238,
        226, 227, 239,
        227, 240, 239,
        227, 228, 240,
        228, 241, 240,
        228, 229, 241,
        229, 242, 241,
        229, 230, 242,
        230, 243, 242,
        230, 231, 243,
        231, 244, 243,
        231, 232, 244,
        232, 245, 244,
        232, 233, 245,
        233, 246, 245,
        234, 235, 247,
        235, 248, 247,
        235, 236, 248,
        236, 249, 248,
        236, 237, 249,
        237, 250, 249,
        237, 238, 250,
        238, 251, 250,
        238, 239, 251,
        239, 252, 251,
        239, 240, 252,
        240, 253, 252,
        240, 241, 253,
        241, 254, 253,
        241, 242, 254,
        242, 255, 254,
        242, 243, 255,
        243, 256, 255,
        243, 244, 256,
        244, 257, 256,
        244, 245, 257,
        245, 258, 257,
        245, 246, 258,
        246, 259, 258,
        247, 248, 260,
        248, 261, 260,
        248, 249, 261,
        249, 262, 261,
        249, 250, 262,
        250, 263, 262,
        250, 251, 263,
        251, 264, 263,
        251, 252, 264,
        252, 265, 264,
        252, 253, 265,
        253, 266, 265,
        253, 254, 266,
        254, 267, 266,
        254, 255, 267,
        255, 268, 267,
        255, 256, 268,
        256, 269, 268,
        256, 257, 269,
        257, 270, 269,
        257, 258, 270,
        258, 271, 270,
        258, 259, 271,
        259, 272, 271,
        260, 261, 273,
        261, 274, 273,
        261, 262, 274,
        262, 275, 274,
        262, 263, 275,
        263, 276, 275,
        263, 264, 276,
        264, 277, 276,
        264, 265, 277,
        265, 278, 277,
        265, 266, 278,
        266, 279, 278,
        266, 267, 279,
        267, 280, 279,
        267, 268, 280,
        268, 281, 280,
        268, 269, 281,
        269, 282, 281,
        269, 270, 282,
        270, 283, 282,
        270, 271, 283,
        271, 284, 283,
        271, 272, 284,
        272, 285, 284,
        273, 274, 286,
        274, 287, 286,
        274, 275, 287,
        275, 288, 287,
        275, 276, 288,
        276, 289, 288,
        276, 277, 289,
        277, 290, 289,
        277, 278, 290,
        278, 291, 290,
        278, 279, 291,
        279, 292, 291,
        279, 280, 292,
        280, 293, 292,
        280, 281, 293,
        281, 294, 293,
        281, 282, 294,
        282, 295, 294,
        282, 283, 295,
        283, 296, 295,
        283, 284, 296,
        284, 297, 296,
        284, 285, 297,
        285, 298, 297,
        286, 287, 299,
        287, 300, 299,
        287, 288, 300,
        288, 301, 300,
        288, 289, 301,
        289, 302, 301,
        289, 290, 302,
        290, 303, 302,
        290, 291, 303,
        291, 304, 303,
        291, 292, 304,
        292, 305, 304,
        292, 293, 305,
        293, 306, 305,
        293, 294, 306,
        294, 307, 306,
        294, 295, 307,
        295, 308, 307,
        295, 296, 308,
        296, 309, 308,
        296, 297, 309,
        297, 310, 309,
        297, 298, 310,
        298, 311, 310,
        299, 300, 312,
        300, 313, 312,
        300, 301, 313,
        301, 314, 313,
        301, 302, 314,
        302, 315, 314,
        302, 303, 315,
        303, 316, 315,
        303, 304, 316,
        304, 317, 316,
        304, 305, 317,
        305, 318, 317,
        305, 306, 318,
        306, 319, 318,
        306, 307, 319,
        307, 320, 319,
        307, 308, 320,
        308, 321, 320,
        308, 309, 321,
        309, 322, 321,
        309, 310, 322,
        310, 323, 322,
        310, 311, 323,
        311, 324, 323
    };
    
    int length = sizeof(vertices) / sizeof(vertices[0]);
    
    std::vector<Vertex> vertexes;
    
    for (int i = 0; i < length; i += 8)
    {
        glm::vec3 pos = glm::vec3(vertices[i], vertices[i + 1], vertices[i + 2]);
        glm::vec3 norm = glm::vec3(vertices[i + 3], vertices[i + 4], vertices[i + 5]);
        glm::vec2 coords = glm::vec2(vertices[i + 6], vertices[i + 7]);
        
        vertexes.push_back(create_vertex(pos, norm, coords));
    }
    
    return Mesh(vertexes, indices);
}

Mesh PrimitivesLoader::create_box_mesh()
{
	float vertices[] = {
		// positions          // normals           // texture coords
		0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f,  0.0f,
		-0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f,  0.0f,
		0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f,  1.0f,
		0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f,  1.0f,
		-0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f,  0.0f,
		-0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f,  1.0f,

		-0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  0.0f,  0.0f,
		0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  1.0f,  0.0f,
		0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  1.0f,  1.0f,
		0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  1.0f,  1.0f,
		-0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  0.0f,  1.0f,
		-0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  0.0f,  0.0f,

		-0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f,  0.0f,
		-0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  1.0f,  1.0f,
		-0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f,  1.0f,
		-0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f,  1.0f,
		-0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  0.0f,  0.0f,
		-0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f,  0.0f,

		0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f,  1.0f,
		0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  1.0f,  1.0f,
		0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f,  0.0f,
		0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f,  0.0f,
		0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  0.0f,  0.0f,
		0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f,  1.0f,

		-0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f,  1.0f,
		0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  1.0f,  1.0f,
		0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f,  0.0f,
		0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f,  0.0f,
		-0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  0.0f,  0.0f,
		-0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f,  1.0f,

		0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,
		0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  1.0f,  1.0f,
		-0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f,  1.0f,
		-0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f,  1.0f,
		-0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f,
		0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f
	};
    
    std::vector<unsigned int> indices = {
        0, 1, 2,
        3, 4, 5,
        6, 7, 8,
        9, 10, 11,
        12, 13, 14,
        15, 16, 17,
        18, 19, 20,
        21, 22, 23,
        24, 25, 26,
        27, 28, 29,
        30, 31, 32,
        33, 34, 35
    };
    
	int length = sizeof(vertices) / sizeof(vertices[0]);

	std::vector<Vertex> vertexes;

	for (int i = 0; i < length; i += 8)
	{
		glm::vec3 pos = glm::vec3(vertices[i], vertices[i + 1], vertices[i + 2]);
		glm::vec3 norm = glm::vec3(vertices[i + 3], vertices[i + 4], vertices[i + 5]);
		glm::vec2 coords = glm::vec2(vertices[i + 6], vertices[i + 7]);

		vertexes.push_back(create_vertex(pos, norm, coords));
	}

	return Mesh(vertexes, indices);	
}

Mesh PrimitivesLoader::create_quad_mesh()
{
	std::vector<Vertex> vertices = {
		create_vertex(-0.5f, -0.5f, 0.0f,  0.0f,  0.0f, -1.0f,  0.0f, 1.0f),
		create_vertex(0.5f, -0.5f, 0.0f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f),
		create_vertex(0.5f,  0.5f, 0.0f,  0.0f,  0.0f, -1.0f,  1.0f, 0.0f),
		create_vertex(0.5f,  0.5f, 0.0f,  0.0f,  0.0f, -1.0f,  1.0f, 0.0f),
		create_vertex(-0.5f,  0.5f, 0.0f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f),
		create_vertex(-0.5f, -0.5f, 0.0f,  0.0f,  0.0f, -1.0f,  0.0f, 1.0f)
	};

	std::vector<unsigned int> indices = {
		0, 1, 2,
		3, 4, 5
	};

	return Mesh(vertices, indices);	
}
